[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rdantic authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Kuethe. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuethe S (2024). rdantic: Type Safety R. R package version 0.1.0.","code":"@Manual{,   title = {rdantic: Type Safety for R},   author = {Stefan Kuethe},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"rdantic","dir":"","previous_headings":"","what":"Type Safety for R","title":"Type Safety for R","text":"goal rdantic add type safety R code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Type Safety for R","text":"can install development version rdantic GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"eodaGmbH/rdantic\")"},{"path":[]},{"path":"/index.html","id":"models","dir":"","previous_headings":"Examples","what":"Models","title":"Type Safety for R","text":"","code":"library(rdantic)  numbers <- base_model(   a = is.numeric,   b = is.numeric )  numbers(a = 2, b = 4) #> $a #> [1] 2 #>  #> $b #> [1] 4 try(   numbers(a = 2, b = \"Hi\") ) #> Error : Value of 'b' (\"Hi\") failed test: .Primitive(\"is.numeric\") my_model <- base_model(   convert_me_to_camel_case = is.character,   a = is_optional(is.integer),   b = is.integer,   txt = is.character )  (m <- my_model(convert_me_to_camel_case = \"okay\", b = 10L, txt = \"Hi\")) #> $convert_me_to_camel_case #> [1] \"okay\" #>  #> $b #> [1] 10 #>  #> $txt #> [1] \"Hi\" #>  #> $a #> NULL m |>   model_dump(exclude_null = TRUE, camels = TRUE) #> $convertMeToCamelCase #> [1] \"okay\" #>  #> $b #> [1] 10 #>  #> $txt #> [1] \"Hi\" m |>   model_dump(include = c(\"a\", \"b\")) #> $b #> [1] 10 #>  #> $a #> NULL"},{"path":"/index.html","id":"type-safety-in-functions","dir":"","previous_headings":"Examples","what":"Type safety in functions","title":"Type Safety for R","text":"","code":"# Use type checking inside your functions  add_two_numbers <- function(a, b) {   validate_args(a = is.numeric, b = is.numeric)   a + b }  add_two_numbers(2, 4) #> [1] 6 try(   add_two_numbers(2, \"4\") ) #> Error : Value of 'b' (\"4\") failed test: .Primitive(\"is.numeric\") devide_two_numbers <- function(a, b) {   validate_args(     a = is.numeric,     b = ~ is.numeric(.x) & .x != 0   )   a / b }  devide_two_numbers(4, 2) #> [1] 2 try(   devide_two_numbers(4, 0) ) #> Error : Value of 'b' (\"0\") failed test: structure(function (..., .x = ..1, .y = ..2, . = ..1) is.numeric(.x) & .x != 0, class = c(\"rlang_lambda_function\", \"function\")) # Add validators  numbers_with_validator <- base_model(   a = is.numeric,   b = is.numeric,   .validators = list(     b = function(x) ifelse(x == 0, 1, x)   ) )  devide_two_numbers_set_0_to_1 <- function(a, b) {   params <- numbers_with_validator(environment())   params$a / params$b }  devide_two_numbers_set_0_to_1(4, 0) #> [1] 4"},{"path":"/index.html","id":"get-settings-from-env-vars","dir":"","previous_headings":"Examples","what":"Get settings from env vars","title":"Type Safety for R","text":"","code":"Sys.setenv(POSTGRES_USERNAME = \"postgres\") Sys.setenv(POSTGRES_PASSWORD = \"superSecret!\") Sys.setenv(POSTGRES_PORT = 15432)  postgres_settings <- base_settings(   username = as.character,   password = as.character,   port = as.integer,   .prefix = \"POSTGRES\" )  postgres_settings() #> $username #> [1] \"postgres\" #>  #> $password #> [1] \"superSecret!\" #>  #> $port #> [1] 15432"},{"path":"/reference/base_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model — base_model","title":"Create a model — base_model","text":"Create model","code":""},{"path":"/reference/base_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model — base_model","text":"","code":"base_model(..., .validators = NULL)"},{"path":"/reference/base_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model — base_model","text":"... model parameters type testers .validators list validators","code":""},{"path":"/reference/base_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model — base_model","text":"model function","code":""},{"path":"/reference/base_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model — base_model","text":"","code":"validators <- list(   b = function(x) ifelse(x == 0, 1, x) )  my_model <- base_model(   a = is.numeric,   b = is.numeric,   .validators = validators )  f <- function(a, b) a / b  do.call(f, my_model(a = 1, b = 0)) # 1 #> [1] 1 do.call(f, list(a = 1, b = 0)) # Inf #> [1] Inf  # Use model inside function f <- function(a, b) {   params <- my_model(environment())   params$a / params$b }  f(1, 0) # 1 #> [1] 1"},{"path":"/reference/base_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create settings — base_settings","title":"Create settings — base_settings","text":"Create settings","code":""},{"path":"/reference/base_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create settings — base_settings","text":"","code":"base_settings(..., .prefix = \"\")"},{"path":"/reference/base_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create settings — base_settings","text":"... env vars type convertors .prefix prefix env vars","code":""},{"path":"/reference/base_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create settings — base_settings","text":"settings function","code":""},{"path":"/reference/base_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create settings — base_settings","text":"","code":"Sys.setenv(POSTGRES_USERNAME = \"postgres\") Sys.setenv(POSTGRES_PASSWORD = \"superSecret!\") Sys.setenv(POSTGRES_PORT = 15432)  postgres_settings <- base_settings(   username = as.character,   password = as.character,   port = as.numeric,   .prefix = \"POSTGRES\" )  postgres_settings() #> $username #> [1] \"postgres\" #>  #> $password #> [1] \"superSecret!\" #>  #> $port #> [1] 15432 #>"},{"path":"/reference/is_optional.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a field as optional — is_optional","title":"Mark a field as optional — is_optional","text":"Mark field optional","code":""},{"path":"/reference/is_optional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a field as optional — is_optional","text":"","code":"is_optional(.f)"},{"path":"/reference/is_optional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a field as optional — is_optional","text":".f type check function","code":""},{"path":"/reference/model_dump.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a model object — model_dump","title":"Modify a model object — model_dump","text":"Modify model object","code":""},{"path":"/reference/model_dump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a model object — model_dump","text":"","code":"model_dump(   .obj,   exclude = NULL,   include = NULL,   exclude_null = FALSE,   exclude_na = FALSE,   camels = FALSE )"},{"path":"/reference/model_dump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a model object — model_dump","text":".obj model object exclude set fields exclude output. include set fields include output. exclude_null Whether drop items value `NULL`. exclude_na Whether drop items value `NA`. camels Whether convert keys camel case.","code":""},{"path":"/reference/model_dump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify a model object — model_dump","text":"list","code":""},{"path":"/reference/validate_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate args inside function — validate_args","title":"Validate args inside function — validate_args","text":"Validate args inside function","code":""},{"path":"/reference/validate_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate args inside function — validate_args","text":"","code":"validate_args(..., .validators = NULL)"},{"path":"/reference/validate_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate args inside function — validate_args","text":"... model parameters type testers .validators list validators","code":""},{"path":"/reference/validate_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate args inside function — validate_args","text":"model function","code":""}]
